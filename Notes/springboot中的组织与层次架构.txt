在纯注解开发的springboot项目中，几乎只需要mapper、service、controller这三层架构，其他的几乎用不到
    其他的组件或层，如传统的DAO层或Entity层，在纯注解开发中往往被整合或简化，
    例如Mapper接口承担了DAO层的职责，而POJO类则作为数据模型使用。
1. mapper（持久层）（映射器）：
    主要用来操作数据库
    mapper层会调用pojo层，mapper编写对数据库进行操作的代码
    mapper层的作用为访问数据库，向数据库发送sql语句，完成数据的增删改查任务。
    mapper层的数据源和数据库连接的参数都是在配置文件中进行配置的，springboot的配置文件一般在yaml中
    数据持久化操作就是指，把数据放到持久化的介质中，同时提供增删改查操作，比如数据通过Mybatis插入到数据库中
  1.5 mapper和dao
      mapper层 = dao层，若使用mybatis框架，则其生成的类名字是mapper，其实就是dao层。
      Mapper模式主要用于对象-关系映射，将对象和数据库表之间进行映射，实现数据的读取和写入。
      DAO模式主要用于数据访问层，将业务逻辑与数据访问逻辑分离，提供一组接口或类来定义对数据的增删改查等操作。
2. service（业务层）（服务层）
    主要用来处理业务逻辑
    service可以粗略的理解为对mapper层进行再次封装，封装成一个服务
    先设计接口，在设计实现类
    service的impl是把mapper和service的接口文件进行整合的实现类，impl实现类是提供给controller使用的
    service是间接操作数据库

    Service，则是处理业务逻辑，对于其中需要的数据库操作，都通过Dao去实现。
        理解：
            举个例子，假设你正在开发一个在线书店应用。业务逻辑可能包括：
                1)根据用户的搜索请求，查找并返回相关的书籍列表。
                2)根据用户的购书请求，处理库存检查、价格计算和订单生成。
                3)实现用户账户管理，如注册、登录和权限检查。
            这些操作都涉及到对数据的处理，但是它们并不是直接的数据访问操作。相反，它们是通过调用数据访问对象（如Dao或Mapper）来获取或更新数据。
            Service层将这些数据访问操作封装起来，并提供了一个更高层次的、面向业务需求的接口。
3. controller（控制层）（控制器）
    主要用来控制业务逻辑
    在controller层定义接口并调用service层接口方法完成对业务逻辑的控制
    controller层负责对前后端的交互，接收前端请求，调用service层，接收service层返回的数据，最后将具体的页面和数据响应给客户端

--------------------------------------------------------------------------------------------------------------------------------
类比理解：

MySQL---mapper---service---controller---Browser/Client
数据库---持久层----服务层-----控制层--------浏览器/服务器
车间机器--工人------车间主任---厂长---------客户

工人在车间负责使用车间机器生产出一个一个的产品
车间主任负责传达厂长的安排命令给工人，指挥工人生产出符合要求的产品
厂长负责对接客户，接收客户的信息和要求，再将要求传达给车间主任，等车间主任把产品收上来后，最后将产品响应给客户


数据库 与 车间机器：
    数据库存储数据，就像车间机器用于生产产品。
    数据库中的数据可以被视为“原材料”，等待被处理和转换成更有用的形式。
    车间机器同样将原材料转换为最终的产品。
持久层 (mapper) 与 工人：
    持久层负责与数据库交互，执行数据的增删改查操作，就像工人操作车间机器生产产品。
    工人是实际执行生产操作的人，他们使用机器将原材料转化为产品。
    持久层（mapper）中的代码通常是与数据库表直接映射的，类似于工人直接操作机器。
服务层 (service) 与 车间主任：
    服务层是业务逻辑的处理中心，它调用持久层来执行具体的数据库操作，并可能包含一些业务规则的处理。
    车间主任负责传达厂长的要求给工人，确保生产出的产品符合标准，类似于服务层协调持久层来执行操作并返回正确的结果。
    服务层还可以对数据进行额外的处理或转换，以满足特定的业务需求。
控制层 (controller) 与 厂长：
    控制层负责接收来自客户端（如浏览器）的请求，并调用服务层来处理这些请求，然后返回响应给客户端。
    厂长负责对接客户，接收客户的订单和要求，然后将这些要求转化为具体的生产任务传达给车间主任。
    控制层在这里起到了一个“翻译”的角色，将客户端的请求转换为服务层可以理解的指令，并将服务层的响应转换为客户端可以理解的格式。
浏览器/客户端 与 客户：
    浏览器或客户端是用户与应用程序交互的界面，用户通过它们发送请求并接收响应。
    客户是生产流程的终端用户，他们提出需求并接收最终的产品。

通过这个类比，我们可以更好地理解三层结构中的每一层是如何协同工作的，以及它们各自在整体架构中的角色和职责。
这种类比也有助于我们思考如何优化和改进这个结构，以更好地满足实际业务需求。























